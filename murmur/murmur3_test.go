package murmur_test

import (
	"fmt"
	"testing"

	"github.com/butcher-of-blaviken/merkle/murmur"
	"github.com/stretchr/testify/assert"
)

func TestMurmur32(t *testing.T) {
	// some test cases taken from btcd
	var tests = []struct {
		seed     uint32
		data     []byte
		expected uint32
	}{
		{0x00000000, []byte{}, 0x00000000},
		{0xfba4c795, []byte{}, 0x6a396f08},
		{0xffffffff, []byte{}, 0x81f16f39},
		{0x00000000, []byte{0x00}, 0x514e28b7},
		{0xfba4c795, []byte{0x00}, 0xea3f0b17},
		{0x00000000, []byte{0xff}, 0xfd6cf10d},
		{0x00000000, []byte{0x00, 0x11}, 0x16c6b7ab},
		{0x00000000, []byte{0x00, 0x11, 0x22}, 0x8eb51c3d},
		{0x00000000, []byte{0x00, 0x11, 0x22, 0x33}, 0xb4471bf8},
		{0x00000000, []byte{0x00, 0x11, 0x22, 0x33, 0x44}, 0xe2301fa8},
		{0x00000000, []byte{0x00, 0x11, 0x22, 0x33, 0x44, 0x55}, 0xfc2e4a15},
		{0x00000000, []byte{0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66}, 0xb074502c},
		{0x00000000, []byte{0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77}, 0x8034d2a0},
		{0x00000000, []byte{0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88}, 0xb4698def},
		{0x00010000, []byte{0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88}, 0xdd658afa},
		{0x00001000, []byte{0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88}, 0xc614a5b7},
		{0x00000201, []byte{0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88}, 0x8d046293},
		{0x0f0f0f00, []byte{0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88}, 0x6a8a79a0},
		{0x00f0f0f0, []byte{0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88}, 0x90674905},
	}
	for i, test := range tests {
		t.Run(fmt.Sprintf("test_%d", i+1), func(t *testing.T) {
			actual := murmur.Hash32(test.seed, test.data)
			assert.Equal(t, test.expected, actual)
		})
	}
}
